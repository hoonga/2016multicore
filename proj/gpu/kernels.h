const char * kernel = \
"#define ReLU(x) (((x)>0)?(x):0)\n"
"__kernel void small_convolution_layer(__global float * inputs, __global float * outputs, \n"
"  __global float * filters, __global float * biases, int N, int D1, int D2,\n"
"  __local float * in){"
"    size_t d1 = get_group_id(0);\n"
"    size_t lid = get_local_id(0);\n"
"    int i, k, l;\n"
"    if (lid == 0)    {\n"
"        int off = d1 * N * N;\n"
"        for (i = 0; i < N * N; i++) {\n"
"            in[i] = inputs[off + i];}}\n"
"    barrier(CLK_LOCAL_MEM_FENCE);\n"
"    for (i = 0; i < D2; i++){\n"
"        float sum = 0;\n"
"        for (k = 0; k < 3; k++) {\n"
"            for (l = 0; l < 3; l++) {\n"
"                int x = lid / N + k - 1;\n"
"                int y = lid % N + l - 1;\n"
"                __local float fil;\n"
"                if (lid == 0)\n"
"                    fil = filters[(i * D1 + d1) * 9 + k * 3 + l];\n"
"                barrier(CLK_LOCAL_MEM_FENCE);\n"
"                if (x >= 0 && x < N && y >= 0 && y < N)\n"
"                    sum += in[x * N + y] * fil;}}\n"
"        __local float bias;\n"
"        if (lid == 0)\n"
"            bias = biases[i];\n"
"        barrier(CLK_LOCAL_MEM_FENCE);\n"
"        outputs[N * N * i + lid] = ReLU(sum + bias);"
"}}\n"
"__kernel void big_convolution_layer(__global float * inputs, __global float * outputs,\n"
"  __global float * filters, __global float * biases, int N, int D1, int D2, \n"
"  __local float * in){\n"
"    size_t d1 = get_group_id(0)/(N/16);\n"
"    size_t n = get_group_id(0)%(N/16);\n"
"    size_t lid = get_local_id(0);\n"
"    int j, k, l;\n"
"    if (lid == 0){\n"
"         int off = d1 * N * N + N * 16 * n;\n"
"         for (j = 0; j < N*16; j++) {\n"
"             in[j] = inputs[off + j];}}\n"
"    barrier(CLK_LOCAL_MEM_FENCE);\n"
"    for (j = 0; j < D2; j++) {\n"
"        float sum = 0;\n"
"        for (k = 0; k < 3; k++) {\n"
"            for (l = 0; l < 3; l++) {\n"
"                int x = lid / N + k - 1;\n"
"                int y = lid % N + l - 1;\n"
"                __local float fil;\n"
"                if (lid == 0)\n"
"                    fil = filters[(j * D1 + d1) * 9+ k * 3 + l];\n"
"                if (x >= 0 && x < 16 && y >= 0 && y < N)\n"
"                    sum += in[x * N + y] * fil;}}\n"
"        __local float bias;\n"
"        if (lid == 0)\n"
"            bias = biases[j];\n"
"        barrier(CLK_LOCAL_MEM_FENCE);\n"
"        outputs[j * N * N + n * N * 16 + lid] = ReLU(sum + bias);"
"}}\n";
